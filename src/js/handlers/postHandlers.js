
import $ from 'jquery';
import { apiRequest } from '../core/api.js';
import * as auth from '../core/auth.js';
import { showAlert } from '../ui/common.js';
import * as uiPosts from '../ui/posts.js';
import { navigateTo, handleHashChange } from '../router.js';

export function handleLikeToggle(event) { if (!auth.checkAuthStatus()) { navigateTo('#login'); return; } const button = $(event.target).closest('.btn-like'); const slug = button.data('slug'); if (!slug) { return; } button.prop('disabled', true); apiRequest('POST', `/posts/${slug}/like/`).done(res => uiPosts.updateLikeButton(slug, res.liked, res.like_count)).fail(() => {}).always(() => button.prop('disabled', false)); }
export function handleSaveToggle(event) { if (!auth.checkAuthStatus()) { navigateTo('#login'); return; } const button = $(event.target).closest('.btn-save'); const slug = button.data('slug'); if (!slug) { return; } button.prop('disabled', true); apiRequest('POST', `/posts/${slug}/save/`).done(res => { uiPosts.updateSaveButton(slug, res.saved); if (window.location.hash.startsWith('#saved-posts') && !res.saved) { button.closest('.post-summary, .card').fadeOut(300, function() { $(this).remove(); }); } }).fail(() => {}).always(() => button.prop('disabled', false)); }
export function handlePostSubmit(event) { event.preventDefault(); if (!auth.checkAuthStatus()) { navigateTo('#login'); return; } const form = $(event.target); const slug = form.data('slug'); const isEdit = !!slug; const method = isEdit ? 'PATCH' : 'POST'; const endpoint = isEdit ? `/posts/${slug}/` : '/posts/'; const formData = new FormData(); const title = $('#post-title').val(); if (!title.trim()) { showAlert('Title required.', 'warning'); return; } formData.append('title', title); const catVal = $('#post-category').val(); if(catVal) formData.append('category', catVal); const tagsVal = $('#post-tags').val(); if(tagsVal) formData.append('tags', tagsVal); formData.append('is_published', $('#post-is-published').is(':checked')); formData.append('featured', $('#post-featured').is(':checked')); if (window.editorInstance) { formData.append('content', window.editorInstance.getMarkdown()); } else { showAlert('Editor not ready.', 'danger'); return; } const imgFile = $('#post-featured-image')[0].files[0]; const removeImg = isEdit && $('#remove-image').is(':checked'); if (imgFile) { formData.append('featured_image', imgFile); } else if (removeImg) { formData.append('featured_image', ''); } const btn = form.find('button[type="submit"]'); const btnTxt = btn.html(); btn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm"></span> Saving...'); apiRequest(method, endpoint, formData, true, true).done(post => { showAlert(`Post ${isEdit ? 'updated' : 'created'}!`, 'success'); navigateTo(`#posts/${post.slug}`); }).fail(() => {}).always(() => btn.prop('disabled', false).html(btnTxt)); }
export function handleDeletePost(event) { if (!auth.checkAuthStatus()) { navigateTo('#login'); return; } const button = $(event.target).closest('.btn-delete-post'); const slug = button.data('slug'); if (!slug) return; if (confirm('Delete this post?')) { button.prop('disabled', true); apiRequest('DELETE', `/posts/${slug}/`).done(() => { showAlert('Post deleted.', 'success'); const hash = window.location.hash; if (hash === `#posts/${slug}` || hash === `#edit-post/${slug}`) { navigateTo('#/'); } else { handleHashChange(); } }).fail(() => button.prop('disabled', false)); } }
