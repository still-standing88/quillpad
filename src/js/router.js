import $ from 'jquery';
import * as api from './core/api.js';
import * as auth from './core/auth.js';
import * as uiCommon from './ui/common.js';
import * as uiNavbar from './ui/navbar.js';
import * as uiPosts from './ui/posts.js';
import * as uiComments from './ui/comments.js';
import * as uiForms from './ui/forms.js';
import * as uiProfile from './ui/profile.js';
import * as uiAdmin from './ui/admin.js';
import * as profileHandlers from './handlers/profileHandlers.js';
import * as postHandlers from './handlers/postHandlers.js';
import * as commentHandlers from './handlers/commentHandlers.js';
import * as adminHandlers from './handlers/adminHandlers.js';
import Editor from '@toast-ui/editor';

let currentEditorInstance = null;
function destroyEditor() { if (currentEditorInstance) { try { currentEditorInstance.destroy(); } catch(e){} currentEditorInstance = null; window.editorInstance = null; } }
function initializeEditor(content = '') { destroyEditor(); try { const el = document.querySelector('#toastui-editor'); if (!el) return; currentEditorInstance = new Editor({ el, height: '400px', initialEditType: 'markdown', previewStyle: 'vertical', initialValue: content, linkAttributes: { target: '_blank', rel: 'noopener noreferrer' } }); window.editorInstance = currentEditorInstance; } catch (e) { $('#toastui-editor').html('<p class="text-danger">Editor load error.</p>'); } }
function loadHomepage(limit, offset) { uiCommon.contentArea.html('<h2>Posts</h2><div id="post-list">Loading...</div><div id="pagination-controls"></div>'); api.apiRequest('GET', `/posts/?limit=${limit}&offset=${offset}`).done(d => { uiPosts.renderPostList(d.results||[],"Posts"); uiCommon.renderPagination('#pagination-controls',d.count,limit,offset,'#/') }).fail(() => uiCommon.contentArea.html('<p>Error loading posts.</p>')); }
function loadPostDetail(slug) { uiCommon.contentArea.html('<div class="text-center mt-5 spinner-border"></div>'); api.apiRequest('POST', `/posts/${slug}/view/`,null,false).fail(e=>console.warn("View count increment failed", e)); api.apiRequest('GET', `/posts/${slug}/`).done(p => { uiPosts.renderFullPost(p); loadComments(p.id); }).fail(()=>uiCommon.contentArea.html('<p>Error loading post details.</p>')); }
export function loadComments(postId) { const list = $('#comments-list'); if(!list.length) return; list.html('<small>Loading comments...</small>'); api.apiRequest('GET', `/comments/by_post/?post_id=${postId}`).done(d => uiComments.renderComments(d,postId)).fail(()=>list.html('<p><small>Error loading comments.</small></p>')); }
function loadMyPosts(limit, offset) { if (!auth.checkAuthStatus()){navigateTo('#login');return;} uiCommon.contentArea.html('<h2>My Posts</h2><div id="post-list">Loading...</div><div id="pagination-controls"></div>'); api.apiRequest('GET', `/posts/my_posts/?limit=${limit}&offset=${offset}`).done(d=>{uiPosts.renderPostList(d.results||[], "My Posts"); uiCommon.renderPagination('#pagination-controls',d.count,limit,offset,'#my-posts')}).fail(()=>uiCommon.contentArea.html('<p>Error loading your posts.</p>')); }
function loadSavedPosts(limit, offset) { if (!auth.checkAuthStatus()){navigateTo('#login');return;} uiCommon.contentArea.html('<h2>Saved Posts</h2><div id="post-list">Loading...</div><div id="pagination-controls"></div>'); api.apiRequest('GET', `/posts/saved/?limit=${limit}&offset=${offset}`).done(d=>{uiPosts.renderPostList(d.results||[], "Saved Posts"); uiCommon.renderPagination('#pagination-controls',d.count,limit,offset,'#saved-posts')}).fail(()=>uiCommon.contentArea.html('<p>Error loading saved posts.</p>')); }
function loadPostsBy(type, value, limit, offset) { let ep='', title='', base=''; switch(type){ case 'category': ep=`/posts/by_category/?slug=${value}`;title=`Category: ${value}`;base=`#posts/by_category/${value}`;break; case 'tag': ep=`/posts/by_tag/?name=${value}`;title=`Tag: ${value}`;base=`#posts/by_tag/${value}`;break; case 'user': ep=`/posts/by_user/?username=${value}`;title=`Posts by ${value}`;base=`#posts/by_user/${value}`;break; default:navigateTo('#/');return;} ep+=`&limit=${limit}&offset=${offset}`; uiCommon.contentArea.html(`<h2>${title}</h2><div id="post-list">Loading...</div><div id="pagination-controls"></div>`); api.apiRequest('GET',ep).done(d=>{uiPosts.renderPostList(d.results||[],title);uiCommon.renderPagination('#pagination-controls',d.count,limit,offset,base)}).fail(()=>uiCommon.contentArea.html(`<p>Error loading posts for ${type} '${value}'.</p>`)); }
function loadProfilePage() { if(!auth.checkAuthStatus()){navigateTo('#login');return;} uiCommon.contentArea.html('<div class="text-center mt-5 spinner-border"></div>'); api.apiRequest('GET', '/profile/').done(u=>uiProfile.renderProfile(u)).fail(()=>uiCommon.contentArea.html('<p>Error loading profile.</p>')); }
function loadCreateEditForm(slug=null) { if(!auth.checkAuthStatus()){navigateTo('#login');return;} if(!auth.canCreatePost()&&!slug){uiCommon.showAlert('Permission denied to create posts.','warning');navigateTo('#/');return;} const isEdit=slug!==null; const title=isEdit?'Edit Post':'Create Post'; uiCommon.contentArea.html(`<h2>${title}</h2><div id="form-container">${uiForms.renderPostForm([],[])}</div>`); Promise.all([api.apiRequest('GET','/categories/?limit=1000'), api.apiRequest('GET','/tags/?limit=1000')]).then(([catRes,tagRes])=>{ const cats=catRes.results||catRes||[]; const tags=tagRes.results||tagRes||[]; if(isEdit){ api.apiRequest('GET',`/posts/${slug}/`).done(pD=>{ if(!auth.canEditOrDelete(pD)){uiCommon.showAlert('Permission denied to edit this post.','danger');navigateTo(`#posts/${slug}`);return;} $('#form-container').html(uiForms.renderPostForm(cats,tags,pD)); initializeEditor(pD?.content||''); }).fail(()=>$('#form-container').html('<p>Error loading post data for editing.</p>')); } else { $('#form-container').html(uiForms.renderPostForm(cats,tags)); initializeEditor(''); } }).catch(()=>$('#form-container').html('<p>Error loading categories or tags.</p>')); }
export function loadCategoryAdmin() { if(!auth.isAdmin()){navigateTo('#/');return;} uiCommon.contentArea.html('<div class="text-center mt-5 spinner-border"></div>'); api.apiRequest('GET','/categories/?limit=1000').done(d=>uiAdmin.renderCategoryAdminList(d.results||d||[])).fail(()=>uiCommon.contentArea.html('<p>Error loading categories.</p>')); }
function loadUserAdmin(limit, offset) { if(!auth.isAdmin()){navigateTo('#/');return;} uiCommon.contentArea.html('<h2>Users</h2><div id="user-list-container">Loading...</div><div id="pagination-controls"></div>'); api.apiRequest('GET',`/users/?limit=${limit}&offset=${offset}`).done(d=>{uiAdmin.renderUserAdminList(d.results||[]);uiCommon.renderPagination('#pagination-controls',d.count,limit,offset,'#admin/users')}).fail(()=>uiCommon.contentArea.html('<p>Error loading users.</p>')); }
function loadTagAdmin(limit, offset) { if(!auth.isAdmin()){navigateTo('#/');return;} uiCommon.contentArea.html('<div class="text-center mt-5 spinner-border"></div>'); api.apiRequest('GET',`/tags/?limit=${limit}&offset=${offset}`).done(d=>{uiAdmin.renderTagAdminList(d.results||[]);uiCommon.renderPagination('#pagination-controls',d.count,limit,offset,'#admin/tags')}).fail(()=>uiCommon.contentArea.html('<p>Error loading tags.</p>')); }
function loadUserEditForm(userId) { if (!auth.isAdmin()) { navigateTo('#/'); return; } uiCommon.contentArea.html('<div class="text-center mt-5 spinner-border"></div>'); api.apiRequest('GET', `/users/${userId}/`).done(user => { uiAdmin.renderUserEditForm(user); attachAdminUserEditFormHandler(); }).fail(() => uiCommon.contentArea.html('<p>Error loading user data for editing.</p>')); }

export function navigateTo(hash) { if(window.location.hash!==hash){window.location.hash=hash;}else{handleHashChange();} }
export function handleHashChange() { destroyEditor(); uiCommon.alertContainer.empty(); uiCommon.contentArea.off().empty().html('<div class="text-center mt-5 spinner-border"></div>'); const hash=window.location.hash||'#/'; if(hash==='#main-content'){uiCommon.contentArea.html('');$('#main-content').attr('tabindex',-1).focus();return;} const parts=hash.substring(1).split('?'); const path=parts[0]; const qs=parts[1]; const pathParts=path.split('/'); const route=pathParts[0]||'home'; const p1=pathParts[1]; const p2=pathParts[2]; const p3=pathParts[3]; const params={}; if(qs){qs.split('&').forEach(p=>{const[k,v]=p.split('=');if(k)params[k]=decodeURIComponent(v||'');});} const offset=parseInt(params.offset)||0; const limit=parseInt(params.limit)||10; switch(route){ case 'home':loadHomepage(limit,offset);attachPostListActionHandlers();break; case 'posts': if(!p1){loadHomepage(limit,offset);attachPostListActionHandlers();} else if(p1==='by_category'&&p2){loadPostsBy('category',p2,limit,offset);attachPostListActionHandlers();} else if(p1==='by_tag'&&p2){loadPostsBy('tag',p2,limit,offset);attachPostListActionHandlers();} else if(p1==='by_user'&&p2){loadPostsBy('user',p2,limit,offset);attachPostListActionHandlers();} else{loadPostDetail(p1);attachPostDetailActionHandlers();} break; case 'login':if(auth.checkAuthStatus()){navigateTo('#/');break;}uiForms.renderLoginForm();attachAuthHandlers();break; case 'register':if(auth.checkAuthStatus()){navigateTo('#/');break;}uiForms.renderRegisterForm();attachAuthHandlers();break; case 'logout':auth.handleLogout();break; case 'profile':if(!auth.checkAuthStatus()){navigateTo('#login');break;}loadProfilePage();attachProfilePageHandlers();break; case 'my-posts':if(!auth.checkAuthStatus()){navigateTo('#login');break;}loadMyPosts(limit,offset);attachPostListActionHandlers();break; case 'saved-posts':if(!auth.checkAuthStatus()){navigateTo('#login');break;}loadSavedPosts(limit,offset);attachPostListActionHandlers();break; case 'create-post':if(!auth.checkAuthStatus()){navigateTo('#login');break;}loadCreateEditForm();attachPostFormHandlers();break; case 'edit-post':if(!auth.checkAuthStatus()){navigateTo('#login');break;}if(p1){loadCreateEditForm(p1);attachPostFormHandlers();}else{navigateTo('#/');}break; case 'admin': if(!auth.isAdmin()){navigateTo('#/');break;} if(p1==='categories'){ loadCategoryAdmin(); attachCategoryAdminHandlers(); }else if(p1==='users'){ if (p2 === 'edit' && p3) { const userId = parseInt(p3); if (!isNaN(userId)) { loadUserEditForm(userId); } else { uiCommon.showAlert('Invalid User ID.', 'danger'); navigateTo('#admin/users'); } } else { loadUserAdmin(limit, offset); } }else if(p1==='tags'){loadTagAdmin(limit,offset);}else{navigateTo('#/');} break; default:uiCommon.contentArea.html('<h2 class="text-center mt-5">404 Not Found</h2><p class="text-center">The requested page does not exist.</p>');} updateActiveNavLink(hash); const navCollapseEl = document.getElementById('navbarNav'); if(navCollapseEl?.classList.contains('show')){ const navCollapseInstance = bootstrap.Collapse.getInstance(navCollapseEl); if (navCollapseInstance) { navCollapseInstance.hide(); } } }
function updateActiveNavLink(hash) { $('.navbar-nav .nav-link, .navbar-nav .dropdown-item, .navbar-nav .dropdown-toggle').removeClass('active').removeAttr('aria-current'); const baseHash = hash.split('?')[0]; let $link = $(`.navbar-nav .nav-link[href="${baseHash}"], .navbar-nav .dropdown-item[href="${baseHash}"]`); if (!$link.length) { const route = baseHash.substring(1).split('/')[0] || 'home'; const baseRoute = `#${route}`; $link = $(`.navbar-nav .nav-link[href="${baseRoute}"]`); if (!$link.length) { $link = $(`.navbar-nav .nav-link[href^="${baseRoute}/"], .navbar-nav .dropdown-item[href^="${baseRoute}/"]`); } } if (!$link.length && (baseHash === '#/' || baseHash === '#')) { $link = $('.navbar-nav .nav-link[href="#/"]'); } if ($link.length) { const linkElement = $link.first(); linkElement.addClass('active'); if (linkElement.hasClass('nav-link')) { linkElement.attr('aria-current', 'page'); } const dropdown = linkElement.closest('.dropdown'); if (dropdown.length) { dropdown.find('.nav-link.dropdown-toggle').addClass('active').attr('aria-current', 'page'); } } }

function attachPostListActionHandlers() { uiCommon.contentArea.off('.postList').on('click.postList','.btn-like',postHandlers.handleLikeToggle).on('click.postList','.btn-save',postHandlers.handleSaveToggle).on('click.postList','.btn-delete-post',postHandlers.handleDeletePost); }
function attachPostDetailActionHandlers() { uiCommon.contentArea.off('.postDetail').on('submit.postDetail','.comment-form',commentHandlers.handleCommentSubmit).on('click.postDetail','.btn-reply',commentHandlers.handleReplyButtonClick).on('click.postDetail','.btn-cancel-reply',commentHandlers.handleCancelReply).on('click.postDetail','.btn-delete-comment',commentHandlers.handleDeleteComment).on('click.postDetail','.btn-like',postHandlers.handleLikeToggle).on('click.postDetail','.btn-save',postHandlers.handleSaveToggle).on('click.postDetail','.btn-delete-post',postHandlers.handleDeletePost); }
function attachProfilePageHandlers() { uiCommon.contentArea.off('.profile').on('submit.profile','#profile-update-form',profileHandlers.handleProfileUpdate).on('submit.profile','#change-password-form',profileHandlers.handleChangePassword).on('submit.profile','#avatar-upload-form',profileHandlers.handleAvatarUpload); }
function attachCategoryAdminHandlers() { uiCommon.contentArea.off('.adminCat').on('click.adminCat','#add-category-btn',()=>{const fc=$('#category-form-container');if(!fc.is(':visible')){fc.html(uiForms.renderCategoryForm()).slideDown().find('#category-name').focus();}}).on('click.adminCat','#cancel-category-form',e=>{const formHtml=uiForms.renderCategoryForm();$(e.target).closest('form').parent().slideUp(function(){$(this).empty().html(formHtml).hide();});}).on('submit.adminCat','#category-form',adminHandlers.handleCategorySubmit).on('click.adminCat','.btn-edit-category',adminHandlers.handleEditCategoryClick).on('click.adminCat','.btn-delete-category',adminHandlers.handleDeleteCategory); }
function attachPostFormHandlers() { uiCommon.contentArea.off('.postForm').on('submit.postForm','#post-form',postHandlers.handlePostSubmit); }
function attachAuthHandlers() { uiCommon.contentArea.off('.auth').on('submit.auth','#login-form',auth.handleLogin).on('submit.auth','#register-form',auth.handleRegister); }
function attachAdminUserEditFormHandler() { uiCommon.contentArea.off('.adminUserEdit').on('submit.adminUserEdit', '#user-edit-form', adminHandlers.handleAdminUserUpdate); }